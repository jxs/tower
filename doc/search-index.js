var N=null,E="",T="t",U="u",searchIndex={};
var R=["tower_service","Service","tower_layer","Response","tower_discover","result","try_from","borrow","type_id","typeid","borrow_mut","try_into","ServiceList","ServiceStream","Discover","tower_test","Mock `Service` that can be used in tests.","tower_test::mock","send_error","tower_test::mock::error","tower_test::mock::future","formatter","SendResponse","ResponseFuture","poll_ready","tower_filter","tower_filter::error","tower_filter::future","FilterLayer","Predicate","Error types","Future types","to_string","into_future","tower_load_shed","tower_load_shed::error","LoadShedLayer","LoadShed","Overloaded","to_owned","clone_into","tower_buffer","with_executor","Creates a new `Buffer` wrapping `service`.","tower_buffer::error","tower_buffer::future","BufferLayer","ServiceError","SpawnError","string","tower_retry","tower_retry::budget","RetryLayer","Overdrawn","option","tower_limit","ConcurrencyLimitLayer","ConcurrencyLimit","RateLimitLayer","RateLimit","tower_limit::rate","duration","Create a new rate limiter","Get a reference to the inner service","Get a mutable reference to the inner service","into_inner","Consume `self`, returning the inner service","tower_limit::concurrency::future","tower_limit::rate::future","future","tower_timeout","tower_timeout::error","tower_timeout::future","TimeoutLayer","tower_util","callallunordered","Extract the wrapped `Service`.","optional","tower_util::layer","tower_util::error::optional","tower_util::future::optional","identity","servicefn","BoxService","UnsyncBoxService","CallAllUnordered","Identity","Optional","MakeConnection","MakeService","ServiceFn","Future","tower_balance","tower_balance::load","make_connection","make_service","tower_balance::choose","tower_balance::error","tower_balance::future","tower_balance::load::peak_ewma","tower_balance::load::pending_requests","tower_balance::pool","replicas","instrument","weighted","partial_cmp","ordering","Yields the next discovery change set.","PowerOfTwoChoices","InstrumentFuture","WithPeakEwma","WithPendingRequests","Instrument","HasWeight","WithWeighted","RoundRobin","NoInstrument","PendingRequests","PoolDiscoverer","default","tower_reconnect","tower_reconnect::future","Reconnect","servicebuilder","tower::builder","tower::layer::util","tower::util","ServiceBuilder","ServiceExt","LayeredMakeService","ServiceFuture","An asynchronous function from `Request` to a `Response`.","Responses given by the service.","Errors produced by the service.","The future response value.","Returns `Ready` when the service is able to process…","Process the request and return the response asynchronously.","Decorates a `Service`, transforming either the request or…","The wrapped service response type","The wrapped service's error type","LayerError","The error produced when calling `layer`","The wrapped service","Wrap the given service with the middleware, returning a…","Various utility types and functions that are generally…","A boxed `Service + Send` trait object.","A boxed `Service` trait object.","This is a `futures::Stream` of responses resulting from…","A stream of responses received from the inner service in…","A `Future` consuming a `Service` and request, waiting…","Optionally forwards requests to an inner service.","Future yielding a `Service` once the service is ready to…","Combine two different service types into a single type.","service_fn","Returns a new `ServiceFn` with the given closure.","Create new `CallAll` combinator.","unordered","Return responses as they are ready, regardless of the…","Create new `CallAllUnordered` combinator.","A no-op middleware.","Two middlewares chained together.","Create a new `Identity` value","Create a new `Stack`.","Create a new `OptionService`","The MakeConnection trait is used to create transports","Connection","The transport provided by this service","Errors produced by the connecting service","The future that eventually produces the transport","Returns `Ready` when it is able to make more connections.","Connect and return a transport asynchronously","Creates new `Service` values.","Responses given by the service","Errors produced by the service","The `Service` value created by this factory","MakeError","Errors produced while building a service.","The future of the `Service` instance.","Returns `Ready` when the factory is able to process create…","Create and return a new service value asynchronously."];
searchIndex["tower"]={"doc":R[144],"i":[[8,R[1],"tower",R[131],N,N],[16,R[3],E,R[132],0,N],[16,"Error",E,R[133],0,N],[16,R[91],E,R[134],0,N],[10,R[24],E,R[135],0,[[["self"]],[R[5],["async"]]]],[10,"call",E,R[136],0,N],[5,R[153],E,R[154],N,[[[T]],[R[82]]]],[8,R[88],E,R[164],N,N],[16,R[165],E,R[166],1,N],[16,"Error",E,R[167],1,N],[16,R[91],E,R[168],1,N],[10,R[24],E,R[169],1,[[["self"]],[R[5],["async"]]]],[10,R[94],E,R[170],1,N],[8,R[89],E,R[171],N,N],[16,R[3],E,R[172],2,N],[16,"Error",E,R[173],2,N],[16,R[1],E,R[174],2,N],[16,R[175],E,R[176],2,N],[16,R[91],E,R[177],2,N],[10,R[24],E,R[178],2,[[["self"]],[R[5],["async"]]]],[10,R[95],E,R[179],2,N],[0,"builder",E,"Builder types to compose layers and services",N,N],[3,R[129],R[124],"Composed `MakeService` produced from `ServiceBuilder`",N,N],[3,R[130],E,"Async resolve the MakeService and wrap it with the layers",N,N],[3,R[127],E,"Declaratively construct Service values.",N,N],[11,"new",E,"Create a new `ServiceBuilder` from a `MakeService`.",3,[[],["self"]]],[11,"layer",E,"Layer a new layer `T` onto the `ServiceBuilder`.",3,[[["self"],[T]],[R[123],["stack"]]]],[11,"buffer",E,"Buffer requests when when the next layer is out of capacity.",3,[[["self"],["usize"]],[R[123],["stack"]]]],[11,"concurrency_limit",E,"Limit the max number of in-flight requests.",3,[[["self"],["usize"]],[R[123],["stack"]]]],[11,"load_shed",E,"Drop requests when the next layer is unable to respond to…",3,[[["self"]],[R[123],["stack"]]]],[11,"rate_limit",E,"Limit requests to at most `num` per the given duration",3,[[["self"],["u64"],[R[61]]],[R[123],["stack"]]]],[11,"retry",E,"Retry failed requests.",3,[[["self"],["p"]],[R[123],["stack"]]]],[11,"timeout",E,"Fail requests that take longer than `timeout`.",3,[[["self"],[R[61]]],[R[123],["stack"]]]],[11,R[95],E,"Create a `LayeredMakeService` from the composed layers and…",3,[[["self"],["m"]],["layeredmakeservice"]]],[11,"service",E,"Wrap the service `S` with the layers.",3,[[["self"],["s"]],[R[5]]]],[0,"layer","tower","A collection of `Layer` based tower services",N,N],[8,"Layer","tower::layer",R[137],N,N],[16,R[3],E,R[138],4,N],[16,"Error",E,R[139],4,N],[16,R[140],E,R[141],4,N],[16,R[1],E,R[142],4,N],[10,"layer",E,R[143],4,[[["self"],["s"]],[R[5]]]],[0,"util",E,"`util` exports an Identity Layer and Chain, a mechanism…",N,N],[3,R[86],R[125],R[159],N,N],[3,"Stack",E,R[160],N,N],[0,"util","tower","Combinators for working with `Service`s",N,N],[3,R[83],R[126],R[145],N,N],[3,"CallAll",E,R[147],N,N],[3,R[85],E,R[148],N,N],[4,"Either",E,R[152],N,N],[13,"A",E,E,5,N],[13,"B",E,E,5,N],[3,"Oneshot",E,R[149],N,N],[3,R[87],E,R[150],N,N],[3,"Ready",E,R[151],N,N],[3,R[84],E,R[146],N,N],[8,R[128],E,"An extension trait for `Service`s that provides a variety…",N,N],[11,"ready",E,"A future yielding the service when it is ready to accept a…",6,[[["self"]],["ready"]]],[11,"oneshot",E,"Consume this `Service`, calling with the providing request…",6,[[["self"],["request"]],["oneshot"]]],[11,"call_all",E,"Process all requests from the given `Stream`, and produce…",6,[[["self"],["s"]],["callall"]]],[11,"from",R[124],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[6],E,E,7,[[[U]],[R[5]]]],[11,R[7],E,E,7,[[["self"]],[T]]],[11,R[8],E,E,7,[[["self"]],[R[9]]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[5]]]],[11,R[24],E,E,7,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,7,N],[11,R[24],E,E,7,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,7,N],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[6],E,E,8,[[[U]],[R[5]]]],[11,R[7],E,E,8,[[["self"]],[T]]],[11,R[8],E,E,8,[[["self"]],[R[9]]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[5]]]],[11,R[33],E,E,8,[[["self"]],["f"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,"from",R[125],E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[39],E,E,9,[[["self"]],[T]]],[11,R[40],E,E,9,N],[11,R[6],E,E,9,[[[U]],[R[5]]]],[11,R[7],E,E,9,[[["self"]],[T]]],[11,R[8],E,E,9,[[["self"]],[R[9]]]],[11,R[10],E,E,9,[[["self"]],[T]]],[11,R[11],E,E,9,[[["self"]],[R[5]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[6],E,E,10,[[[U]],[R[5]]]],[11,R[7],E,E,10,[[["self"]],[T]]],[11,R[8],E,E,10,[[["self"]],[R[9]]]],[11,R[10],E,E,10,[[["self"]],[T]]],[11,R[11],E,E,10,[[["self"]],[R[5]]]],[11,"from",R[126],E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[6],E,E,11,[[[U]],[R[5]]]],[11,R[7],E,E,11,[[["self"]],[T]]],[11,R[8],E,E,11,[[["self"]],[R[9]]]],[11,R[10],E,E,11,[[["self"]],[T]]],[11,R[11],E,E,11,[[["self"]],[R[5]]]],[11,R[24],E,E,11,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,11,N],[11,R[24],E,E,11,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,11,N],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[6],E,E,12,[[[U]],[R[5]]]],[11,R[7],E,E,12,[[["self"]],[T]]],[11,R[8],E,E,12,[[["self"]],[R[9]]]],[11,R[10],E,E,12,[[["self"]],[T]]],[11,R[11],E,E,12,[[["self"]],[R[5]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[6],E,E,13,[[[U]],[R[5]]]],[11,R[7],E,E,13,[[["self"]],[T]]],[11,R[8],E,E,13,[[["self"]],[R[9]]]],[11,R[10],E,E,13,[[["self"]],[T]]],[11,R[11],E,E,13,[[["self"]],[R[5]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[6],E,E,5,[[[U]],[R[5]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[5]]]],[11,R[33],E,E,5,[[["self"]],["f"]]],[11,R[24],E,E,5,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,5,N],[11,R[24],E,E,5,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,5,N],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[6],E,E,14,[[[U]],[R[5]]]],[11,R[7],E,E,14,[[["self"]],[T]]],[11,R[8],E,E,14,[[["self"]],[R[9]]]],[11,R[10],E,E,14,[[["self"]],[T]]],[11,R[11],E,E,14,[[["self"]],[R[5]]]],[11,R[33],E,E,14,[[["self"]],["f"]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[6],E,E,15,[[[U]],[R[5]]]],[11,R[7],E,E,15,[[["self"]],[T]]],[11,R[8],E,E,15,[[["self"]],[R[9]]]],[11,R[10],E,E,15,[[["self"]],[T]]],[11,R[11],E,E,15,[[["self"]],[R[5]]]],[11,R[24],E,E,15,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,15,N],[11,R[24],E,E,15,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,15,N],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[6],E,E,16,[[[U]],[R[5]]]],[11,R[7],E,E,16,[[["self"]],[T]]],[11,R[8],E,E,16,[[["self"]],[R[9]]]],[11,R[10],E,E,16,[[["self"]],[T]]],[11,R[11],E,E,16,[[["self"]],[R[5]]]],[11,R[33],E,E,16,[[["self"]],["f"]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[6],E,E,17,[[[U]],[R[5]]]],[11,R[7],E,E,17,[[["self"]],[T]]],[11,R[8],E,E,17,[[["self"]],[R[9]]]],[11,R[10],E,E,17,[[["self"]],[T]]],[11,R[11],E,E,17,[[["self"]],[R[5]]]],[11,R[24],E,E,17,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,17,N],[11,R[24],E,E,17,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,17,N],[11,R[24],E,E,15,[[["self"]],[R[5],["async"]]]],[11,"call",E,E,15,N],[11,R[24],E,E,11,[[["self"]],[R[5],["async"]]]],[11,"call",E,E,11,[[["self"],[T]],["box",[R[69]]]]],[11,R[24],E,E,17,[[["self"]],[R[5],["async"]]]],[11,"call",E,E,17,[[["self"],[T]],["box",[R[69]]]]],[11,R[24],E,E,5,[[["self"]],[R[5],["async"]]]],[11,"call",E,E,5,N],[11,"poll",E,E,13,[[["self"]],[R[5],["async"]]]],[11,"poll",E,E,12,[[["self"]],[R[5],["async"]]]],[11,R[119],R[125],E,9,[[],[R[81]]]],[11,"fmt",E,E,9,[[["self"],[R[21]]],[R[5],["error"]]]],[11,"fmt",R[126],E,13,[[["self"],[R[21]]],[R[5],["error"]]]],[11,"fmt",E,E,11,[[["self"],[R[21]]],[R[5],["error"]]]],[11,"fmt",E,E,12,[[["self"],[R[21]]],[R[5],["error"]]]],[11,"fmt",R[125],E,10,[[["self"],[R[21]]],[R[5],["error"]]]],[11,"fmt",R[126],E,16,[[["self"],[R[21]]],[R[5],["error"]]]],[11,"fmt",E,E,17,[[["self"],[R[21]]],[R[5],["error"]]]],[11,"clone",R[125],E,9,[[["self"]],[R[81]]]],[11,"layer",E,E,9,[[["self"],["s"]],[R[5]]]],[11,"layer",E,E,10,[[["self"],["s"]],[R[5]]]],[11,"poll",R[126],E,16,[[["self"]],[R[5],["async"]]]],[11,"poll",E,E,5,[[["self"]],[R[5],["async"]]]],[11,"poll",E,E,14,[[["self"]],[R[5],["async"]]]],[11,"fmt",R[124],E,7,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,8,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[5]]]],[11,"poll",E,E,8,[[["self"]],["poll"]]],[11,R[24],E,E,7,[[["self"]],["poll"]]],[11,"call",E,E,7,N],[11,"new",R[125],R[161],9,[[],[R[81]]]],[11,"new",E,R[162],10,[[["inner"],["outer"]],["stack"]]],[11,"new",R[126],E,11,[[["s"]],["boxservice"]]],[11,"new",E,R[155],12,[[["svc"],["s"]],["callall"]]],[11,R[65],E,R[76],12,[[["self"]],["svc"]]],[11,R[156],E,R[157],12,[[["self"]],[R[75]]]],[11,"new",E,R[158],13,[[["svc"],["s"]],[R[75]]]],[11,R[65],E,R[76],13,[[["self"]],["svc"]]],[11,"new",E,E,14,[[["s"],["req"]],["oneshot"]]],[11,"new",E,R[163],15,[[[R[54]]],[R[77]]]],[11,"new",E,E,16,[[[T]],["ready"]]],[11,"new",E,E,17,[[["s"]],["unsyncboxservice"]]]],"p":[[8,R[1]],[8,R[88]],[8,R[89]],[3,R[127]],[8,"Layer"],[4,"Either"],[8,R[128]],[3,R[129]],[3,R[130]],[3,R[86]],[3,"Stack"],[3,R[83]],[3,"CallAll"],[3,R[85]],[3,"Oneshot"],[3,R[87]],[3,"Ready"],[3,R[84]]]};
searchIndex[R[0]]={"doc":"Definition of the core `Service` trait to Tower","i":[[8,R[1],R[0],R[131],N,N],[16,R[3],E,R[132],0,N],[16,"Error",E,R[133],0,N],[16,R[91],E,R[134],0,N],[10,R[24],E,R[135],0,[[["self"]],["poll"]]],[10,"call",E,R[136],0,N]],"p":[[8,R[1]]]};
searchIndex[R[120]]={"doc":E,"i":[[3,R[122],R[120],E,N,N],[0,R[69],E,E,N,N],[3,R[23],R[121],E,N,N],[11,"new",R[120],E,0,[[["m"],["target"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,R[24],E,E,0,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,0,N],[11,R[24],E,E,0,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,0,N],[11,"from",R[121],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,R[33],E,E,1,[[["self"]],["f"]]],[11,"fmt",R[120],E,0,[[["self"],[R[21]]],[R[5]]]],[11,"poll",R[121],E,1,[[["self"]],["poll"]]],[11,R[24],R[120],E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,N]],"p":[[3,R[122]],[3,R[23]]]};
searchIndex[R[15]]={"doc":R[16],"i":[[0,"mock",R[15],R[16],N,N],[3,"Mock",R[17],"A mock service",N,N],[3,"Handle",E,"Handle to the `Mock`.",N,N],[3,R[22],E,"Send a response in reply to a received request.",N,N],[5,"pair",E,"Create a new `Mock` and `Handle` pair.",N,N],[0,"error",E,R[30],N,N],[3,"Closed",R[19],E,N,N],[0,R[69],R[17],R[31],N,N],[3,R[23],R[20],"Future of the `Mock` response.",N,N],[11,"poll_request",R[17],"Asynchronously gets the next request",0,[[["self"]],["poll",[R[54],"box"]]]],[11,"next_request",E,"Synchronously gets the next request.",0,[[["self"]],[R[54]]]],[11,"allow",E,"Allow a certain number of requests",0,[[["self"],["u64"]]]],[11,R[18],E,"Make the next poll_ method error with the given error.",0,[[["self"],["e"]]]],[11,"send_response",E,E,1,[[["self"],[T]]]],[11,R[18],E,E,1,[[["self"],["e"]]]],[14,"assert_request_eq",R[15],"Asserts that the mock handle receives a new request equal…",N,N],[11,"from",R[17],E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[39],E,E,2,[[["self"]],[T]]],[11,R[40],E,E,2,N],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,R[32],R[19],E,3,[[["self"]],[R[49]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,"from",R[20],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[5]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[5]]]],[11,R[33],E,E,4,[[["self"]],["f"]]],[11,"clone",R[17],E,2,[[["self"]],["self"]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,E,0,[[["self"]]]],[11,"fmt",R[19],E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[20],E,4,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[17],E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[5]]]],[11,"poll",R[20],E,4,[[["self"]],["poll"]]],[11,R[24],R[17],E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,N]],"p":[[3,"Handle"],[3,R[22]],[3,"Mock"],[3,"Closed"],[3,R[23]]]};
searchIndex[R[25]]={"doc":"Conditionally dispatch requests to the inner service based…","i":[[3,R[28],R[25],E,N,N],[3,"Filter",E,E,N,N],[0,"error",E,R[30],N,N],[3,"Error",R[26],"Error produced by `Filter`",N,N],[11,"rejected",E,"Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner",E,"Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,R[69],R[25],R[31],N,N],[3,R[23],R[27],"Filtered response future",N,N],[11,"new",R[25],E,1,[[[U]],["self"]]],[8,R[29],E,"Checks a request",N,N],[16,R[91],E,E,2,N],[10,"check",E,E,2,N],[11,"new",E,E,3,[[[T],[U]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,R[32],R[26],E,0,[[["self"]],[R[49]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",R[27],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[5]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[5]]]],[11,R[33],E,E,4,[[["self"]],["f"]]],[11,"fmt",R[26],E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[27],E,4,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[25],E,3,[[["self"],[R[21]]],[R[5]]]],[11,"source",R[26],E,0,[[["self"]],[R[54],["error"]]]],[11,"poll",R[27],E,4,[[["self"]],["poll"]]],[11,R[24],R[25],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,N],[11,"layer",E,E,1,[[["self"],["s"]],[R[5]]]]],"p":[[3,"Error"],[3,R[28]],[8,R[29]],[3,"Filter"],[3,R[23]]]};
searchIndex[R[2]]={"doc":"Layer traits and extensions.","i":[[8,"Layer",R[2],R[137],N,N],[16,R[3],E,R[138],0,N],[16,"Error",E,R[139],0,N],[16,R[140],E,R[141],0,N],[16,R[1],E,R[142],0,N],[10,"layer",E,R[143],0,[[["self"],["s"]],[R[5]]]]],"p":[[8,"Layer"]]};
searchIndex[R[34]]={"doc":"tower-load-shed","i":[[3,R[23],R[34],"Future for the `LoadShed` service.",N,N],[3,R[36],E,"A `tower-layer` to wrap services in `LoadShed` middleware.",N,N],[3,R[37],E,"A `Service` that sheds load when the inner service isn't…",N,N],[0,"error",E,R[30],N,N],[3,R[38],R[35],"An error returned by `Overload` when the underlying…",N,N],[11,"new",R[34],"Creates a new layer.",0,[[],["self"]]],[11,"new",E,"Wraps a service in `LoadShed` middleware.",1,[[["s"]],["self"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,R[33],E,E,2,[[["self"]],["f"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[39],E,E,1,[[["self"]],[T]]],[11,R[40],E,E,1,N],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,R[32],R[35],E,3,[[["self"]],[R[49]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,"clone",R[34],E,1,[[["self"]],["self"]]],[11,"fmt",R[35],E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[34],E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[5]]]],[11,"poll",E,E,2,[[["self"]],["poll"]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N],[11,"layer",E,E,0,[[["self"],["s"]],[R[5]]]]],"p":[[3,R[36]],[3,R[37]],[3,R[23]],[3,R[38]]]};
searchIndex[R[41]]={"doc":"Buffer requests when the inner service is out of capacity.","i":[[3,R[46],R[41],"Buffer requests with a bounded buffer",N,N],[3,"Buffer",E,"Adds a buffer in front of an inner service.",N,N],[0,"error",E,R[30],N,N],[3,R[47],R[44],"An error produced by a `Service` wrapped by a `Buffer`",N,N],[3,"Closed",E,"An error when the buffer's worker closes unexpectedly.",N,N],[3,R[48],E,"Error produced when spawning the worker fails",N,N],[0,R[69],R[41],R[31],N,N],[3,R[23],R[45],"Future eventually completed with the response to the…",N,N],[11,"new",R[41],E,0,[[["usize"]],["self"]]],[11,R[42],E,E,0,[[["usize"],["e"]],["self"]]],[11,"new",E,R[43],1,[[[T],["usize"]],[R[5],["box"]]]],[11,R[42],E,R[43],1,[[[T],["usize"],["e"]],[R[5],["box"]]]],[8,"WorkerExecutor",E,"This trait allows you to use either Tokio's threaded…",N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[39],E,E,1,[[["self"]],[T]]],[11,R[40],E,E,1,N],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,R[32],R[44],E,2,[[["self"]],[R[49]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,R[32],E,E,3,[[["self"]],[R[49]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,R[32],E,E,4,[[["self"]],[R[49]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[5]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[5]]]],[11,"from",R[45],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[6],E,E,5,[[[U]],[R[5]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[5]]]],[11,R[33],E,E,5,[[["self"]],["f"]]],[11,"clone",R[41],E,1,[[["self"]],["self"]]],[11,"fmt",R[44],E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,4,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,4,[[["self"],[R[21]]],[R[5]]]],[11,"source",E,E,2,[[["self"]],[R[54],["error"]]]],[11,"poll",R[45],E,5,[[["self"]],["poll"]]],[11,"layer",R[41],E,0,[[["self"],["s"]],[R[5]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N]],"p":[[3,R[46]],[3,"Buffer"],[3,R[47]],[3,"Closed"],[3,R[48]],[3,R[23]]]};
searchIndex[R[4]]={"doc":"Tower service discovery","i":[[3,R[12],R[4],"Static service discovery based on a predetermined list of…",N,N],[3,R[13],E,"Dynamic service discovery based on a stream of service…",N,N],[4,"Change",E,"A change in the service set",N,N],[13,"Insert",E,E,0,N],[13,"Remove",E,E,0,N],[11,"new",E,E,1,[[[T]],["servicelist"]]],[11,"new",E,E,2,[[["s"]],["self"]]],[8,R[14],E,"Provide a uniform set of services able to satisfy a request.",N,N],[16,"Key",E,"NewService key",3,N],[16,R[1],E,E,3,N],[16,"Error",E,"Error produced during discovery",3,N],[10,"poll",E,R[107],3,[[["self"]],["poll",["change"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"poll",E,E,1,[[["self"]],["poll",["change"]]]],[11,"poll",E,E,2,[[["self"]],["poll",["change"]]]]],"p":[[4,"Change"],[3,R[12]],[3,R[13]],[8,R[14]]]};
searchIndex[R[50]]={"doc":"Tower middleware for retrying \"failed\" requests.","i":[[3,"Retry",R[50],"Configure retrying requests of \"failed\" responses.",N,N],[3,R[52],E,"Retry requests based on a policy",N,N],[3,R[23],E,"The `Future` returned by a `Retry` service.",N,N],[0,"budget",E,"A retry \"budget\" for allowing only a certain amount of…",N,N],[3,"Budget",R[51],"Represents a \"budget\" for retrying requests.",N,N],[3,R[53],E,"Indicates that it is not currently allowed to \"withdraw\"…",N,N],[11,"new",E,"Create a `Budget` that allows for a certain percent of the…",0,[[[R[61]],["u32"],["f32"]],["self"]]],[11,"deposit",E,"Store a \"deposit\" in the budget, which will be used to…",0,[[["self"]]]],[11,"withdraw",E,"Check whether there is enough \"balance\" in the budget to…",0,[[["self"]],[R[5],["overdrawn"]]]],[8,"Policy",R[50],"A \"retry policy\" to classify if a request should be retried.",N,N],[16,R[91],E,"The `Future` type returned by `Policy::retry()`.",1,N],[10,"retry",E,"Check the policy if a certain request should be retried.",1,[[["self"],["req"],[R[5]]],[R[54]]]],[10,"clone_request",E,"Tries to clone a request before being passed to the inner…",1,[[["self"],["req"]],[R[54]]]],[11,"new",E,"Create a new `RetryLayer` from a retry policy",2,[[["p"]],["self"]]],[11,"new",E,"Retry the inner service depending on this…",3,[[["p"],["s"]],["self"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[39],E,E,3,[[["self"]],[T]]],[11,R[40],E,E,3,N],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[5]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[5]]]],[11,R[33],E,E,4,[[["self"]],["f"]]],[11,"from",R[51],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[6],E,E,5,[[[U]],[R[5]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[5]]]],[11,R[119],E,E,0,[[],["budget"]]],[11,"clone",R[50],E,3,[[["self"]],["retry"]]],[11,"fmt",R[51],E,5,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[50],E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,4,[[["self"],[R[21]]],[R[5]]]],[11,"poll",E,E,4,[[["self"]],["poll"]]],[11,"layer",E,E,2,[[["self"],["s"]],[R[5]]]],[11,R[24],E,E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,N]],"p":[[3,"Budget"],[8,"Policy"],[3,R[52]],[3,"Retry"],[3,R[23]],[3,R[53]]]};
searchIndex[R[55]]={"doc":"Limit inbound requests.","i":[[3,R[57],R[55],E,N,N],[3,R[56],E,E,N,N],[3,R[59],E,E,N,N],[3,R[58],E,E,N,N],[0,"concurrency",E,"Limit the max number of requests being concurrently…",N,N],[3,R[56],"tower_limit::concurrency",E,N,N],[3,R[57],E,E,N,N],[0,R[69],E,E,N,N],[3,R[23],R[67],E,N,N],[11,"new",R[55],E,0,[[["usize"]],["self"]]],[11,"new",E,R[62],1,[[[T],["usize"]],["self"]]],[11,"get_ref",E,R[63],1,[[["self"]],[T]]],[11,"get_mut",E,R[64],1,[[["self"]],[T]]],[11,R[65],E,R[66],1,[[["self"]],[T]]],[0,"rate",E,"Limit the rate at which requests are processed.",N,N],[3,R[58],R[60],E,N,N],[3,"Rate",E,E,N,N],[3,R[59],E,E,N,N],[0,"error",E,E,N,N],[0,R[69],E,E,N,N],[3,R[23],R[68],E,N,N],[11,"new",R[55],E,2,[[["u64"],[R[61]]],["self"]]],[11,"new",R[60],"Create a new rate",3,[[["u64"],[R[61]]],["self"]]],[11,"new",R[55],R[62],4,[[[T],["rate"]],["self"]]],[11,"get_ref",E,R[63],4,[[["self"]],[T]]],[11,"get_mut",E,R[64],4,[[["self"]],[T]]],[11,R[65],E,R[66],4,[[["self"]],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[39],E,E,1,[[["self"]],[T]]],[11,R[40],E,E,1,N],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[39],E,E,0,[[["self"]],[T]]],[11,R[40],E,E,0,N],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[5]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[5]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,"from",R[67],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[6],E,E,5,[[[U]],[R[5]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[5]]]],[11,R[33],E,E,5,[[["self"]],["f"]]],[11,"from",R[60],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[39],E,E,3,[[["self"]],[T]]],[11,R[40],E,E,3,N],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,"from",R[68],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[6],E,E,6,[[[U]],[R[5]]]],[11,R[7],E,E,6,[[["self"]],[T]]],[11,R[8],E,E,6,[[["self"]],[R[9]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[5]]]],[11,R[33],E,E,6,[[["self"]],["f"]]],[11,"clone",R[55],E,0,[[["self"]],["concurrencylimitlayer"]]],[11,"clone",E,E,1,[[["self"]],["concurrencylimit"]]],[11,"clone",R[60],E,3,[[["self"]],["rate"]]],[11,"drop",R[67],E,5,[[["self"]]]],[11,"fmt",E,E,5,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[55],E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[68],E,6,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[55],E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[60],E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[55],E,4,[[["self"],[R[21]]],[R[5]]]],[11,"poll",R[67],E,5,[[["self"]],["poll"]]],[11,"poll",R[68],E,6,[[["self"]],["poll"]]],[11,"layer",R[55],E,0,[[["self"],["s"]],[R[5]]]],[11,"layer",E,E,2,[[["self"],["s"]],[R[5]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N],[11,R[24],E,E,4,[[["self"]],["poll"]]],[11,"call",E,E,4,N]],"p":[[3,R[56]],[3,R[57]],[3,R[58]],[3,"Rate"],[3,R[59]],[3,R[23]],[3,R[23]]]};
searchIndex[R[70]]={"doc":"Tower middleware that applies a timeout to requests.","i":[[3,R[73],R[70],"Applies a timeout to requests via the supplied inner…",N,N],[3,"Timeout",E,"Applies a timeout to requests.",N,N],[0,"error",E,R[30],N,N],[3,"Elapsed",R[71],"The timeout elapsed.",N,N],[0,R[69],R[70],R[31],N,N],[3,R[23],R[72],"`Timeout` response future",N,N],[11,"new",R[70],"Create a timeout from a duration",0,[[[R[61]]],["self"]]],[11,"new",E,"Creates a new Timeout",1,[[[T],[R[61]]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[39],E,E,1,[[["self"]],[T]]],[11,R[40],E,E,1,N],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,R[32],R[71],E,2,[[["self"]],[R[49]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,"from",R[72],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,R[33],E,E,3,[[["self"]],["f"]]],[11,"clone",R[70],E,1,[[["self"]],["timeout"]]],[11,"fmt",R[71],E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[72],E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[70],E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,1,[[["self"],[R[21]]],[R[5]]]],[11,"poll",R[72],E,3,[[["self"]],["poll"]]],[11,"layer",R[70],E,0,[[["self"],["s"]],[R[5]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,N]],"p":[[3,R[73]],[3,"Timeout"],[3,"Elapsed"],[3,R[23]]]};
searchIndex[R[74]]={"doc":R[144],"i":[[3,R[83],R[74],R[145],N,N],[3,R[84],E,R[146],N,N],[3,"CallAll",E,R[147],N,N],[3,R[85],E,R[148],N,N],[3,"Oneshot",E,R[149],N,N],[3,R[87],E,R[150],N,N],[3,"Ready",E,R[151],N,N],[3,R[90],E,"A `Service` implemented by a closure.",N,N],[4,"Either",E,R[152],N,N],[13,"A",E,E,0,N],[13,"B",E,E,0,N],[5,R[153],E,R[154],N,[[[T]],[R[82]]]],[11,"new",E,E,1,[[["s"]],["self"]]],[11,"new",E,E,2,[[["s"]],["self"]]],[11,"new",E,R[155],3,[[["svc"],["s"]],["callall"]]],[11,R[65],E,R[76],3,[[["self"]],["svc"]]],[11,R[156],E,R[157],3,[[["self"]],[R[75]]]],[11,"new",E,R[158],4,[[["svc"],["s"]],[R[75]]]],[11,R[65],E,R[76],4,[[["self"]],["svc"]]],[0,"layer",E,E,N,N],[3,R[86],R[78],R[159],N,N],[3,"Stack",E,R[160],N,N],[11,"new",E,R[161],5,[[],[R[81]]]],[11,"new",E,R[162],6,[[["inner"],["outer"]],["self"]]],[11,"new",R[74],E,7,[[["s"],["req"]],["self"]]],[11,"new",E,R[163],8,[[[R[54]]],[R[77]]]],[11,"new",E,E,9,[[[T]],["self"]]],[0,"error",E,R[30],N,N],[0,R[77],"tower_util::error",E,N,N],[3,"None",R[79],E,N,N],[0,R[69],R[74],R[31],N,N],[0,R[77],"tower_util::future",E,N,N],[3,R[23],R[80],"Response future returned by `Optional`.",N,N],[8,R[88],R[74],R[164],N,N],[16,R[165],E,R[166],10,N],[16,"Error",E,R[167],10,N],[16,R[91],E,R[168],10,N],[10,R[24],E,R[169],10,[[["self"]],["poll"]]],[10,R[94],E,R[170],10,N],[8,R[89],E,R[171],N,N],[16,R[3],E,R[172],11,N],[16,"Error",E,R[173],11,N],[16,R[1],E,R[174],11,N],[16,R[175],E,R[176],11,N],[16,R[91],E,R[177],11,N],[10,R[24],E,R[178],11,[[["self"]],["poll"]]],[10,R[95],E,R[179],11,N],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[6],E,E,1,[[[U]],[R[5]]]],[11,R[7],E,E,1,[[["self"]],[T]]],[11,R[8],E,E,1,[[["self"]],[R[9]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[5]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[5]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[5]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[6],E,E,7,[[[U]],[R[5]]]],[11,R[7],E,E,7,[[["self"]],[T]]],[11,R[8],E,E,7,[[["self"]],[R[9]]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[5]]]],[11,R[33],E,E,7,[[["self"]],["f"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[6],E,E,8,[[[U]],[R[5]]]],[11,R[7],E,E,8,[[["self"]],[T]]],[11,R[8],E,E,8,[[["self"]],[R[9]]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[5]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[6],E,E,9,[[[U]],[R[5]]]],[11,R[7],E,E,9,[[["self"]],[T]]],[11,R[8],E,E,9,[[["self"]],[R[9]]]],[11,R[10],E,E,9,[[["self"]],[T]]],[11,R[11],E,E,9,[[["self"]],[R[5]]]],[11,R[33],E,E,9,[[["self"]],["f"]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[39],E,E,12,[[["self"]],[T]]],[11,R[40],E,E,12,N],[11,R[6],E,E,12,[[[U]],[R[5]]]],[11,R[7],E,E,12,[[["self"]],[T]]],[11,R[8],E,E,12,[[["self"]],[R[9]]]],[11,R[10],E,E,12,[[["self"]],[T]]],[11,R[11],E,E,12,[[["self"]],[R[5]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,R[33],E,E,0,[[["self"]],["f"]]],[11,"from",R[78],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[39],E,E,5,[[["self"]],[T]]],[11,R[40],E,E,5,N],[11,R[6],E,E,5,[[[U]],[R[5]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[5]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[6],E,E,6,[[[U]],[R[5]]]],[11,R[7],E,E,6,[[["self"]],[T]]],[11,R[8],E,E,6,[[["self"]],[R[9]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[5]]]],[11,R[32],R[79],E,13,[[["self"]],[R[49]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[6],E,E,13,[[[U]],[R[5]]]],[11,R[7],E,E,13,[[["self"]],[T]]],[11,R[8],E,E,13,[[["self"]],[R[9]]]],[11,R[10],E,E,13,[[["self"]],[T]]],[11,R[11],E,E,13,[[["self"]],[R[5]]]],[11,"from",R[80],E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[6],E,E,14,[[[U]],[R[5]]]],[11,R[7],E,E,14,[[["self"]],[T]]],[11,R[8],E,E,14,[[["self"]],[R[9]]]],[11,R[10],E,E,14,[[["self"]],[T]]],[11,R[11],E,E,14,[[["self"]],[R[5]]]],[11,R[33],E,E,14,[[["self"]],["f"]]],[11,R[119],R[78],E,5,[[],[R[81]]]],[11,"clone",E,E,5,[[["self"]],[R[81]]]],[11,"clone",R[74],E,12,[[["self"]],[R[82]]]],[11,"fmt",R[79],E,13,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[74],E,1,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,2,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,3,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,4,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[78],E,5,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,6,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[79],E,13,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[74],E,9,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,12,[[["self"],[R[21]]],[R[5]]]],[11,"poll",E,E,0,[[["self"]],["poll"]]],[11,"poll",E,E,7,[[["self"]],["poll"]]],[11,"poll",R[80],E,14,[[["self"]],["poll"]]],[11,"poll",R[74],E,9,[[["self"]],["poll"]]],[11,"poll",E,E,3,[[["self"]],["poll",[R[54]]]]],[11,"poll",E,E,4,[[["self"]],["poll",[R[54]]]]],[11,R[24],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[T]],["box",[R[69]]]]],[11,R[24],E,E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],[T]],["box",[R[69]]]]],[11,R[24],E,E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,N],[11,R[24],E,E,8,[[["self"]],["poll"]]],[11,"call",E,E,8,N],[11,R[24],E,E,12,[[["self"]],["poll"]]],[11,"call",E,E,12,N],[11,"layer",R[78],E,5,[[["self"],["s"]],[R[5]]]],[11,"layer",E,E,6,[[["self"],["s"]],[R[5]]]]],"p":[[4,"Either"],[3,R[83]],[3,R[84]],[3,"CallAll"],[3,R[85]],[3,R[86]],[3,"Stack"],[3,"Oneshot"],[3,R[87]],[3,"Ready"],[8,R[88]],[8,R[89]],[3,R[90]],[3,"None"],[3,R[23]]]};
searchIndex[R[92]]={"doc":E,"i":[[3,"Weight",R[92],"A weight on [0.0, ∞].",N,N],[3,"Weighted",E,"A Service, that implements Load, that",N,N],[3,R[114],E,E,N,N],[3,"Balance",E,"Balances requests across a set of inner services.",N,N],[0,"choose",E,E,N,N],[3,R[108],R[96],"Chooses nodes using the [Power of Two Choices][p2c].",N,N],[3,R[115],E,"Chooses nodes sequentially.",N,N],[3,"TooFew",E,"Indicates that there were not at least two services.",N,N],[3,"Replicas",E,"Holds two or more services.",N,N],[11,"new",E,E,0,[[["smallrng"]],["self"]]],[8,"Choose",E,"A strategy for choosing nodes.",N,N],[10,"choose",E,"Returns the index of a replica to be used next.",1,[[["self"],[R[102]]],["usize"]]],[11,"len",E,E,2,[[["self"]],["usize"]]],[0,"error",R[92],E,N,N],[3,"Balance",R[97],E,N,N],[0,R[69],R[92],E,N,N],[3,R[23],R[98],E,N,N],[0,"load",R[92],E,N,N],[3,"Constant",R[93],"Wraps a type so that `Load::load` returns a constant value.",N,N],[3,R[109],E,"Attaches a `I`-typed instruments to the result of an…",N,N],[3,R[116],E,"A `Instrument` implementation that drops each instrument…",N,N],[11,"new",E,E,3,[[[T],["m"]],["self"]]],[11,"new",E,E,4,[[["i"],["h"],["f"]],["self"]]],[0,"peak_ewma",E,E,N,N],[3,"PeakEwma",R[99],"Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,R[110],E,"Wraps a `D`-typed stream of discovery updates with…",N,N],[3,"Cost",E,"Represents the relative cost of communicating with a…",N,N],[3,"Handle",E,"Updates `RttEstimate` when dropped.",N,N],[11,"new",E,"Wraps a `D`-typed `Discover` so that services have a…",5,[[["d"],[R[61]],[R[61]],["i"]],["self"]]],[0,"pending_requests",R[93],E,N,N],[3,R[117],R[100],"Expresses load based on the number of currently-pending…",N,N],[3,R[111],E,"Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count",E,"Represents the number of currently-pending requests to a…",N,N],[3,"Handle",E,E,N,N],[11,"new",E,E,6,[[["d"],["i"]],["self"]]],[11,"new",R[92],E,7,[[[T],["w"]],["self"]]],[11,"into_parts",E,E,7,N],[18,"MIN",E,E,8,N],[18,"DEFAULT",E,E,8,N],[8,R[112],R[93],"Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output",E,E,9,N],[10,R[103],E,"Attaches an `H`-typed handle to a `V`-typed value.",9,N],[8,"Load",E,"Exposes a load metric.",N,N],[16,"Metric",E,E,10,N],[10,"load",E,E,10,N],[0,"pool",R[92],"This module defines a load-balanced pool of services that…",N,N],[3,R[118],R[101],"A wrapper around `MakeService` that discovers a new…",N,N],[3,"Builder",E,"A [builder] that lets you configure how a [`Pool`]…",N,N],[3,"Pool",E,"A dynamically sized, load-balanced pool of `Service`…",N,N],[11,"new",E,"Create a new builder with default values for all load…",11,[[],["self"]]],[11,"underutilized_below",E,"When the estimated load (see the module-level docs) drops…",11,[[["self"],["f64"]],["self"]]],[11,"loaded_above",E,"When the estimated load (see the module-level docs)…",11,[[["self"],["f64"]],["self"]]],[11,"initial",E,"The initial estimated load average.",11,[[["self"],["f64"]],["self"]]],[11,"urgency",E,"How aggressively the estimated load average is updated.",11,[[["self"],["f64"]],["self"]]],[11,"build",E,"See [`Pool::new`].",11,[[["self"],["ms"],["target"],["c"]],["pool"]]],[11,"new",E,"Construct a new dynamically sized `Pool`.",12,[[["ms"],["target"],["c"]],["self"]]],[8,R[113],R[92],E,N,N],[10,"weight",E,E,13,[[["self"]],["weight"]]],[11,"p2c",E,"Chooses services using the [Power of Two Choices][p2c].",14,[[["d"]],["self"]]],[11,"p2c_with_rng",E,"Initializes a P2C load balancer from the provided…",14,[[["d"],["r"]],[R[5],["error"]]]],[11,"round_robin",E,"Attempts to choose services sequentially.",14,[[["d"]],["self"]]],[11,"new",E,"Creates a new balancer.",14,[[["d"],["c"]],["self"]]],[11,"is_ready",E,"Returns true iff there are ready services.",14,[[["self"]],["bool"]]],[11,"is_not_ready",E,"Returns true iff there are no ready services.",14,[[["self"]],["bool"]]],[11,"num_ready",E,"Counts the number of services considered to be ready.",14,[[["self"]],["usize"]]],[11,"num_not_ready",E,"Counts the number of services not considered to be ready.",14,[[["self"]],["usize"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[39],E,E,8,[[["self"]],[T]]],[11,R[40],E,E,8,N],[11,R[6],E,E,8,[[[U]],[R[5]]]],[11,R[7],E,E,8,[[["self"]],[T]]],[11,R[8],E,E,8,[[["self"]],[R[9]]]],[11,R[10],E,E,8,[[["self"]],[T]]],[11,R[11],E,E,8,[[["self"]],[R[5]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[39],E,E,7,[[["self"]],[T]]],[11,R[40],E,E,7,N],[11,R[6],E,E,7,[[[U]],[R[5]]]],[11,R[7],E,E,7,[[["self"]],[T]]],[11,R[8],E,E,7,[[["self"]],[R[9]]]],[11,R[10],E,E,7,[[["self"]],[T]]],[11,R[11],E,E,7,[[["self"]],[R[5]]]],[11,R[24],E,E,7,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,7,N],[11,R[24],E,E,7,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,7,N],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[6],E,E,15,[[[U]],[R[5]]]],[11,R[7],E,E,15,[[["self"]],[T]]],[11,R[8],E,E,15,[[["self"]],[R[9]]]],[11,R[10],E,E,15,[[["self"]],[T]]],[11,R[11],E,E,15,[[["self"]],[R[5]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[6],E,E,14,[[[U]],[R[5]]]],[11,R[7],E,E,14,[[["self"]],[T]]],[11,R[8],E,E,14,[[["self"]],[R[9]]]],[11,R[10],E,E,14,[[["self"]],[T]]],[11,R[11],E,E,14,[[["self"]],[R[5]]]],[11,R[24],E,E,14,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,14,N],[11,R[24],E,E,14,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,14,N],[11,"from",R[96],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[6],E,E,0,[[[U]],[R[5]]]],[11,R[7],E,E,0,[[["self"]],[T]]],[11,R[8],E,E,0,[[["self"]],[R[9]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[5]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[6],E,E,16,[[[U]],[R[5]]]],[11,R[7],E,E,16,[[["self"]],[T]]],[11,R[8],E,E,16,[[["self"]],[R[9]]]],[11,R[10],E,E,16,[[["self"]],[T]]],[11,R[11],E,E,16,[[["self"]],[R[5]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[39],E,E,17,[[["self"]],[T]]],[11,R[40],E,E,17,N],[11,R[6],E,E,17,[[[U]],[R[5]]]],[11,R[7],E,E,17,[[["self"]],[T]]],[11,R[8],E,E,17,[[["self"]],[R[9]]]],[11,R[10],E,E,17,[[["self"]],[T]]],[11,R[11],E,E,17,[[["self"]],[R[5]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[6],E,E,2,[[[U]],[R[5]]]],[11,R[7],E,E,2,[[["self"]],[T]]],[11,R[8],E,E,2,[[["self"]],[R[9]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[5]]]],[11,R[32],R[97],E,18,[[["self"]],[R[49]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[6],E,E,18,[[[U]],[R[5]]]],[11,R[7],E,E,18,[[["self"]],[T]]],[11,R[8],E,E,18,[[["self"]],[R[9]]]],[11,R[10],E,E,18,[[["self"]],[T]]],[11,R[11],E,E,18,[[["self"]],[R[5]]]],[11,"from",R[98],E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[6],E,E,19,[[[U]],[R[5]]]],[11,R[7],E,E,19,[[["self"]],[T]]],[11,R[8],E,E,19,[[["self"]],[R[9]]]],[11,R[10],E,E,19,[[["self"]],[T]]],[11,R[11],E,E,19,[[["self"]],[R[5]]]],[11,R[33],E,E,19,[[["self"]],["f"]]],[11,"from",R[93],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[6],E,E,3,[[[U]],[R[5]]]],[11,R[7],E,E,3,[[["self"]],[T]]],[11,R[8],E,E,3,[[["self"]],[R[9]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[5]]]],[11,R[24],E,E,3,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,3,N],[11,R[24],E,E,3,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,3,N],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[6],E,E,4,[[[U]],[R[5]]]],[11,R[7],E,E,4,[[["self"]],[T]]],[11,R[8],E,E,4,[[["self"]],[R[9]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[5]]]],[11,R[33],E,E,4,[[["self"]],["f"]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[39],E,E,20,[[["self"]],[T]]],[11,R[40],E,E,20,N],[11,R[6],E,E,20,[[[U]],[R[5]]]],[11,R[7],E,E,20,[[["self"]],[T]]],[11,R[8],E,E,20,[[["self"]],[R[9]]]],[11,R[10],E,E,20,[[["self"]],[T]]],[11,R[11],E,E,20,[[["self"]],[R[5]]]],[11,"from",R[99],E,21,[[[T]],[T]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[6],E,E,21,[[[U]],[R[5]]]],[11,R[7],E,E,21,[[["self"]],[T]]],[11,R[8],E,E,21,[[["self"]],[R[9]]]],[11,R[10],E,E,21,[[["self"]],[T]]],[11,R[11],E,E,21,[[["self"]],[R[5]]]],[11,R[24],E,E,21,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,21,N],[11,R[24],E,E,21,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,21,N],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[6],E,E,5,[[[U]],[R[5]]]],[11,R[7],E,E,5,[[["self"]],[T]]],[11,R[8],E,E,5,[[["self"]],[R[9]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[5]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[39],E,E,22,[[["self"]],[T]]],[11,R[40],E,E,22,N],[11,R[6],E,E,22,[[[U]],[R[5]]]],[11,R[7],E,E,22,[[["self"]],[T]]],[11,R[8],E,E,22,[[["self"]],[R[9]]]],[11,R[10],E,E,22,[[["self"]],[T]]],[11,R[11],E,E,22,[[["self"]],[R[5]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[6],E,E,23,[[[U]],[R[5]]]],[11,R[7],E,E,23,[[["self"]],[T]]],[11,R[8],E,E,23,[[["self"]],[R[9]]]],[11,R[10],E,E,23,[[["self"]],[T]]],[11,R[11],E,E,23,[[["self"]],[R[5]]]],[11,"from",R[100],E,24,[[[T]],[T]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[6],E,E,24,[[[U]],[R[5]]]],[11,R[7],E,E,24,[[["self"]],[T]]],[11,R[8],E,E,24,[[["self"]],[R[9]]]],[11,R[10],E,E,24,[[["self"]],[T]]],[11,R[11],E,E,24,[[["self"]],[R[5]]]],[11,R[24],E,E,24,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,24,N],[11,R[24],E,E,24,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,24,N],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[6],E,E,6,[[[U]],[R[5]]]],[11,R[7],E,E,6,[[["self"]],[T]]],[11,R[8],E,E,6,[[["self"]],[R[9]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[5]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[39],E,E,25,[[["self"]],[T]]],[11,R[40],E,E,25,N],[11,R[6],E,E,25,[[[U]],[R[5]]]],[11,R[7],E,E,25,[[["self"]],[T]]],[11,R[8],E,E,25,[[["self"]],[R[9]]]],[11,R[10],E,E,25,[[["self"]],[T]]],[11,R[11],E,E,25,[[["self"]],[R[5]]]],[11,"equivalent",E,E,25,[[["self"],["k"]],["bool"]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[6],E,E,26,[[[U]],[R[5]]]],[11,R[7],E,E,26,[[["self"]],[T]]],[11,R[8],E,E,26,[[["self"]],[R[9]]]],[11,R[10],E,E,26,[[["self"]],[T]]],[11,R[11],E,E,26,[[["self"]],[R[5]]]],[11,"from",R[101],E,27,[[[T]],[T]]],[11,"into",E,E,27,[[["self"]],[U]]],[11,R[6],E,E,27,[[[U]],[R[5]]]],[11,R[7],E,E,27,[[["self"]],[T]]],[11,R[8],E,E,27,[[["self"]],[R[9]]]],[11,R[10],E,E,27,[[["self"]],[T]]],[11,R[11],E,E,27,[[["self"]],[R[5]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[39],E,E,11,[[["self"]],[T]]],[11,R[40],E,E,11,N],[11,R[6],E,E,11,[[[U]],[R[5]]]],[11,R[7],E,E,11,[[["self"]],[T]]],[11,R[8],E,E,11,[[["self"]],[R[9]]]],[11,R[10],E,E,11,[[["self"]],[T]]],[11,R[11],E,E,11,[[["self"]],[R[5]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[6],E,E,12,[[[U]],[R[5]]]],[11,R[7],E,E,12,[[["self"]],[T]]],[11,R[8],E,E,12,[[["self"]],[R[9]]]],[11,R[10],E,E,12,[[["self"]],[T]]],[11,R[11],E,E,12,[[["self"]],[R[5]]]],[11,R[24],E,E,12,[[["self"]],[R[5],["async"]]]],[11,R[94],E,E,12,N],[11,R[24],E,E,12,[[["self"]],[R[5],["async"]]]],[11,R[95],E,E,12,N],[11,"choose",R[96],"Chooses two distinct nodes at random and compares their…",0,[[["self"],[R[102]]],["usize"]]],[11,"choose",E,E,16,[[["self"],[R[102]]],["usize"]]],[11,R[103],R[93],E,20,[[["self"],["h"],["v"]],["v"]]],[11,"weight",R[99],E,21,[[["self"]],["weight"]]],[11,"weight",R[100],E,24,[[["self"]],["weight"]]],[11,"weight",R[92],E,7,[[["self"]],["weight"]]],[11,"load",R[93],E,3,[[["self"]],["m"]]],[11,"load",R[99],E,21,N],[11,"load",R[100],E,24,[[["self"]],["count"]]],[11,"load",R[92],E,7,N],[11,"eq",R[99],E,22,[[["self"],["cost"]],["bool"]]],[11,"ne",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"eq",R[100],E,25,[[["self"],["count"]],["bool"]]],[11,"ne",E,E,25,[[["self"],["count"]],["bool"]]],[11,"eq",R[92],E,8,[[["self"],["weight"]],["bool"]]],[11,"ne",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[104]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[104]]],["bool"]]],[11,R[119],R[96],E,0,[[],["self"]]],[11,R[119],E,E,16,[[],["roundrobin"]]],[11,R[119],R[100],E,25,[[],["count"]]],[11,R[119],R[92],E,8,[[],["self"]]],[11,R[119],R[101],E,11,[[],["self"]]],[11,"cmp",R[100],E,25,[[["self"],["count"]],[R[106]]]],[11,"clone",R[96],E,17,[[["self"]],["toofew"]]],[11,"clone",R[93],E,20,[[["self"]],["noinstrument"]]],[11,"clone",R[99],E,22,[[["self"]],["cost"]]],[11,"clone",R[100],E,25,[[["self"]],["count"]]],[11,"clone",R[92],E,8,[[["self"]],["weight"]]],[11,"clone",E,E,7,[[["self"]],[R[104]]]],[11,"clone",R[101],E,11,[[["self"]],["builder"]]],[11,"from",R[92],E,7,[[[T]],["self"]]],[11,"from",E,E,15,[[["d"]],["self"]]],[11,"from",E,E,8,[[["f64"]],["self"]]],[11,"drop",R[99],E,23,[[["self"]]]],[11,"into",R[92],E,8,[[["self"]],["f64"]]],[11,R[105],R[99],E,22,[[["self"],["cost"]],[R[54],[R[106]]]]],[11,"lt",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"le",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"gt",E,E,22,[[["self"],["cost"]],["bool"]]],[11,"ge",E,E,22,[[["self"],["cost"]],["bool"]]],[11,R[105],R[100],E,25,[[["self"],["count"]],[R[54],[R[106]]]]],[11,"lt",E,E,25,[[["self"],["count"]],["bool"]]],[11,"le",E,E,25,[[["self"],["count"]],["bool"]]],[11,"gt",E,E,25,[[["self"],["count"]],["bool"]]],[11,"ge",E,E,25,[[["self"],["count"]],["bool"]]],[11,R[105],R[92],E,8,[[["self"],["weight"]],[R[54],[R[106]]]]],[11,"lt",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"le",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"gt",E,E,8,[[["self"],["weight"]],["bool"]]],[11,"ge",E,E,8,[[["self"],["weight"]],["bool"]]],[11,R[105],E,E,7,[[["self"],[R[104]]],[R[54],[R[106]]]]],[11,"lt",E,E,7,[[["self"],[R[104]]],["bool"]]],[11,"le",E,E,7,[[["self"],[R[104]]],["bool"]]],[11,"gt",E,E,7,[[["self"],[R[104]]],["bool"]]],[11,"ge",E,E,7,[[["self"],[R[104]]],["bool"]]],[11,"fmt",R[97],E,18,[[["self"],[R[21]]],[R[5]]]],[11,"div",R[99],E,22,[[["self"],["weight"]],["f64"]]],[11,"div",R[100],E,25,[[["self"],["weight"]],["f64"]]],[11,"index",R[96],E,2,N],[11,"fmt",E,E,0,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,16,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,17,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[97],E,18,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[93],E,20,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,4,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[99],E,22,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[100],E,24,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,6,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,25,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,26,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[92],E,8,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,7,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",E,E,15,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[101],E,11,[[["self"],[R[21]]],[R[5]]]],[11,"fmt",R[92],E,14,[[["self"],[R[21]]],[R[5]]]],[11,"source",R[97],E,18,[[["self"]],[R[54],["error"]]]],[11,"poll",R[98],E,19,[[["self"]],["poll"]]],[11,"poll",R[93],E,4,[[["self"]],["poll"]]],[11,R[24],E,E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,N],[11,R[24],R[99],E,21,[[["self"]],["poll"]]],[11,"call",E,E,21,N],[11,R[24],R[100],E,24,[[["self"]],["poll"]]],[11,"call",E,E,24,N],[11,R[24],R[92],E,7,[[["self"]],["poll"]]],[11,"call",E,E,7,N],[11,R[24],R[101],E,12,[[["self"]],["poll"]]],[11,"call",E,E,12,N],[11,R[24],R[92],"Prepares the balancer to process a request.",14,[[["self"]],["poll"]]],[11,"call",E,E,14,N],[11,"poll",R[93],R[107],3,[[["self"]],["poll",["change"]]]],[11,"poll",R[99],E,5,[[["self"]],["poll",["change"]]]],[11,"poll",R[100],R[107],6,[[["self"]],["poll",["change"]]]],[11,"poll",R[92],E,15,[[["self"]],["poll",["change"]]]],[11,"poll",R[101],E,27,[[["self"]],["poll",["change"]]]]],"p":[[3,R[108]],[8,"Choose"],[3,"Replicas"],[3,"Constant"],[3,R[109]],[3,R[110]],[3,R[111]],[3,"Weighted"],[3,"Weight"],[8,R[112]],[8,"Load"],[3,"Builder"],[3,"Pool"],[8,R[113]],[3,"Balance"],[3,R[114]],[3,R[115]],[3,"TooFew"],[3,"Balance"],[3,R[23]],[3,R[116]],[3,"PeakEwma"],[3,"Cost"],[3,"Handle"],[3,R[117]],[3,"Count"],[3,"Handle"],[3,R[118]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);